#labels Phase-Requirements
[http://alankang.tistory.com/137 강규영 님의 JOE 포스팅]의 예제를 그대로 옮겨왔습니다.

HTML 코드가 다음과 같이 주어졌습니다.

{{{
<div id="names">
   <p class="name"><span class="first">Alan</span> <span class="last">Kang</span></p>
   <p class="name"><span class="first">Heungsub</span> <span class="last">Lee</span></p>
</div>
}}}

Name 클래스의 인스턴스를 HTML 엘리먼트로 출력한 모습입니다. MooJoe는 JOE와 마찬가지로 HTML 엘리먼트와 JS 객체를 동기화시켜줍니다. 먼저 Name 클래스를 정의합니다.

{{{
var Name = new MooJoe.Class({
    first: '.first',
    last: '.last'
});
}}}

MooJoe의 클래스 생성자는 MooTools의 클래스 생성자와 비슷하며 MooTools에서 제공하는 Class 인스턴스를 반환합니다. 인자로 맵핑 룰을 지정할 수 있습니다. Name 클래스의 경우 `first` 속성에 `.first` CSS 셀렉터를, `last` 속성에 `.last` CSS 셀렉터를 지정했습니다.

{{{
var names = $$('#names p.name').toObject(Name); // [name_instance#1, name_instance#2]
}}}

MooTools에서 제공하는 `Element`와 `Elements` 클래스를 확장하여 `toObject()`라는 메소드를 만들었습니다. 인자로 방금 만든 MooJoe 클래스를 지정해주면 맵핑 룰을 적용시켜 객체를 반환합니다.

getter/setter는 MooTools 1.2의 컨벤션을 따릅니다.

{{{
value_of(names[1].get('first')).should_be('Heungsub');
value_of(names[1].get('last')).should_be('Lee');

names[1].set('first', 'Haesam');

value_of(names[1].get('first')).should_be('Haesam');
}}}

또한 속성 값을 변경할 경우 맵핑된 엘리멘트에도 즉각 반영됩니다.

{{{
value_of($$('#names p.name .first')[1].get('html')).should_be('Haesam');
}}}